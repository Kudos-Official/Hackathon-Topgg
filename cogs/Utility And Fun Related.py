import discord
from discord.ext import commands
import random
import time
import asyncio
import aiohttp
def getmember(guild, arg, author):
  if arg is None:
    return author
  else:
    arg=arg.lower()
    member=None
    for i in guild.members:
      if arg in i.name.lower() or arg==str(i.id):
        member=i
        break
      else:
        continue
    return member or author
class FunAndUtil(commands.Cog):
    """All fun commands are here"""
    def __init__(self, bot):
      self.bot=bot
    @commands.command(aliases=['hangtheman'], description='Play A Hangman Game(Word Generated By https://random-word-form.herokuapp.com)', help="hangman")
    async def hangman(self, ctx):
      """Hangman Game"""
      starttime=time.time()
      right=self.bot.get_emoji(893361416826929193)
      output=self.bot.get_emoji(893515473663193118)
      info=self.bot.get_emoji(893355607988535297)
      used=self.bot.get_emoji(893360690033737758)
      trye=self.bot.get_emoji(893359685632143400)
      wrong=self.bot.get_emoji(893368921862836254)
      async with aiohttp.ClientSession() as cs:
        async with cs.get('https://random-word-form.herokuapp.com/random/noun?count=10') as r:
            res = await r.json()
      text=random.choice(res)
      text=text.lower()
      tries=0
      lettersdone=[]
      sendtext=""
      win="false"
      for i in text:
        if i.isspace():
          sendtext=f'{sendtext} '
        else:
          sendtext=f'{sendtext}â¬œ'
      embed=discord.Embed(description=f'{right} {ctx.author.mention}, consider reading below!')
      embed.add_field(name=f"{output} Lets Begin!", value=f'`{sendtext}`', inline=True)
      embed.add_field(name=f"{info} Info", value=f'This is a **{len(text.strip(" "))}** lettered word', inline=True)
      embed.add_field(name=f"{trye} Tries", value=f'You get a total of 6 tries, once you have guessed 6 wrong answers you\'re out!', inline=False)
      embed.add_field(name=f"{used} Letters Used", value='None, game not yet started', inline=True)
      embed.set_author(name=f"{ctx.author.name}'s ", icon_url=ctx.author.avatar_url)
      embed.set_footer(text='Awaiting your first guess, 15 seconds of time for each!')
      await ctx.reply(embed=embed, mention_author=False)
      while tries<6:
        def check(m):
          return m.channel==ctx.channel and m.author==ctx.author
        try:
          content=await self.bot.wait_for('message',timeout=15.0,check=check)
        except asyncio.TimeoutError:
          await ctx.reply(f"{wrong} {ctx.author.mention} time up, start a new game!", mention_author=False)
          win="time"
          break
        else:
          newmessageid=content.id
          newmessageid=await ctx.channel.fetch_message(newmessageid)
          content=content.content.lower()
          if len(content)!=1:
            continue
          else:
            if content in text:
              if content in lettersdone:
                sendlettersdone=", ".join(lettersdone).upper()
                embed=discord.Embed(description=f'{right} {ctx.author.mention}, consider reading below, **__you have guessed a letter that you have already guessed once in this same game before!__**')
                embed.add_field(name=f"{output} Current Progression", value=f'`{sendtext}`', inline=True)
                embed.add_field(name=f"{wrong} Error", value=f'You have already guessed `{content}`!', inline=True)
                embed.add_field(name=f"{trye} Tries", value=f'`{6-tries}` tries left', inline=False)
                embed.add_field(name=f"{used} Letters Used", value=f'`{sendlettersdone}` are the used letters', inline=True)
                embed.set_author(name=f"{ctx.author.name}'s ", icon_url=ctx.author.avatar_url)
                embed.set_footer(text='Awaiting your next guess, 15 seconds of time for each!')
                await newmessageid.reply(embed=embed, mention_author=False)
              else:
                lettersdone.append(content)
                sendtext=list(sendtext)
                for i in range(len(text)):
                  if text[i]==content:
                    sendtext[i]=content
                sendtext="".join(sendtext)
                sendlettersdone=", ".join(lettersdone).upper()
                if sendtext.replace(text, " ").isspace():
                  embed=discord.Embed(description=f'{right} {ctx.author.mention}, consider reading below, **__you won the game!!!!__**')
                  embed.add_field(name=f"{output} Current Progression", value=f'`{sendtext}`', inline=True)
                  embed.add_field(name=f"{info} Victory", value=f'You guessed the correct word', inline=True)
                  embed.add_field(name=f"{trye} Tries That Were Remaning", value=f'`{6-tries}`', inline=False)
                  embed.add_field(name=f"{used} Letters That Were Used", value=f'`{sendlettersdone}` are the used letters', inline=True)
                  embed.set_author(name=f"{ctx.author.name}'s ", icon_url=ctx.author.avatar_url)
                  embed.set_footer(text='Good Game!')
                  await newmessageid.reply(embed=embed, mention_author=False)
                  win="true"
                  break
                else:
                  embed=discord.Embed(description=f'{right} {ctx.author.mention}, consider reading below, **__correct guess__**')
                  embed.add_field(name=f"{output} Current Progression", value=f'`{sendtext}`', inline=True)
                  embed.add_field(name=f"{info} Info", value=f'Correct Guess', inline=True)
                  embed.add_field(name=f"{trye} Tries", value=f'`{6-tries}` tries left', inline=False)
                  embed.add_field(name=f"{used} Letters Used", value=f'`{sendlettersdone}` are the used letters', inline=True)
                  embed.set_author(name=f"{ctx.author.name}'s ", icon_url=ctx.author.avatar_url)
                  embed.set_footer(text='Awaiting your next guess, 15 seconds of time for each!')
                  await newmessageid.reply(embed=embed, mention_author=False)
            else:
              if content in lettersdone:
                sendlettersdone=", ".join(lettersdone).upper()
                embed=discord.Embed(description=f'{right} {ctx.author.mention}, consider reading below, **__you have guessed a letter that you have already guessed once in this same game before!__**')
                embed.add_field(name=f"{output} Current Progression", value=f'`{sendtext}`', inline=True)
                embed.add_field(name=f"{wrong} Error", value=f'You have already guessed `{content}`!', inline=True)
                embed.add_field(name=f"{trye} Tries", value=f'`{6-tries}` tries left', inline=False)
                embed.add_field(name=f"{used} Letters Used", value=f'`{sendlettersdone}` are the used letters', inline=True)
                embed.set_author(name=f"{ctx.author.name}'s ", icon_url=ctx.author.avatar_url)
                embed.set_footer(text='Awaiting your next guess, 15 seconds of time for each!')
                await newmessageid.reply(embed=embed, mention_author=False)
              else:
                lettersdone.append(content)
                tries=tries+1
                sendlettersdone=", ".join(lettersdone).upper()
                embed=discord.Embed(description=f'{right} {ctx.author.mention}, consider reading below, **__you have guessed a wrong letter!__**')
                embed.add_field(name=f"{output} Current Progression", value=f'`{sendtext}`', inline=True)
                embed.add_field(name=f"{wrong} Error", value=f'Wrong letter guessed', inline=True)
                embed.add_field(name=f"{trye} Tries", value=f'`{6-tries}` tries left', inline=False)
                embed.add_field(name=f"{used} Letters Used", value=f'`{sendlettersdone}` are the used letters', inline=True)
                embed.set_author(name=f"{ctx.author.name}'s ", icon_url=ctx.author.avatar_url)
                embed.set_footer(text='Awaiting your next guess, 15 seconds of time for each!')
                await newmessageid.reply(embed=embed, mention_author=False)
      if win=="true":
        timetaken=round(time.time()-starttime, 2)
        await ctx.reply(f"{right} Congrats, you got it right! The text was **{text}** and you successfully guessed it with **{tries}** wrong answer(s)!\n\n{info} Total Time Taken: `{timetaken}` seconds", mention_author=True)
      elif win=="time":
        return
      else:
        await ctx.reply(f"{wrong} Aww rip, you got it wrong. The text was **{text}**!", mention_author=True)
    @commands.command(aliases=['typingtest','wpm'], description='Play A Typing Game And Know Your WPM(Sentence Generated By Words From https://random-word-form.herokuapp.com)', help="typing")
    async def typing(self, ctx):
      right=self.bot.get_emoji(893361416826929193)
      wrong=self.bot.get_emoji(893368921862836254)
      async with aiohttp.ClientSession() as cs:
        async with cs.get('https://random-word-form.herokuapp.com/random/noun?count=15') as r:
            res = await r.json()
      sentence=" ".join(res)
      embed=discord.Embed(title="Typing test", description=f'{right} {ctx.author.mention}, below are your words!')
      embed.add_field(name="Sentence", value=f'{sentence}')
      embed.set_footer(text="You have 30 seconds to type this!", icon_url=ctx.author.avatar_url)
      await ctx.send(embed=embed)
      starttime=time.time()
      def check(m):
        return m.author==ctx.author and m.channel==ctx.channel
      try:
        content=await self.bot.wait_for('message',timeout=30.0,check=check)
      except asyncio.TimeoutError:
        await ctx.reply(f"{wrong} {ctx.author.mention} time up, start a new game!", mention_author=True)
        return
      else:
        if sentence.lower()==content.content.lower():
          timetaken=round(time.time()-starttime)
          if timetaken==0:
            await ctx.send("Copy pasting doesn't really help smhmh")
          else:
            length=0
            for i in sentence:
              if i.isspace():
                length=length+1
            length=length+1
            wpm=(length*60)/timetaken
            await ctx.send(f"{right} {ctx.author.mention}, you guessed it correctly in **{timetaken}** second{'s' if timetaken!=1 else ''}, your wpm is estimated to be **{round(wpm)}**!")
            return
        else:
          await ctx.send(f"{wrong} Wrong sentence")
          return
    @commands.command(aliases=['user','userinfo','user-info'], description='Get Information On A Given User', help="whois [member]")
    async def whois(self, ctx, *, arg=None):
      try:
         member=ctx.message.mentions[0]
      except:
         member=getmember(ctx.guild, arg, ctx.author)
      roles=[x.mention for x in member.roles]
      roles=", ".join(roles)
      embed=discord.Embed(title="Info")
      embed.add_field(name="Username And Discriminator", value=f'{member.name}#{member.discriminator}')
      embed.add_field(name="Nickname", value=f'{member.nick}')
      embed.add_field(name="Creation Date", value=f'{member.created_at}')
      embed.add_field(name="Server Join Date", value=f'{member.joined_at}')
      embed.add_field(name="Status", value=f'{member.status}')
      embed.add_field(name="Bot", value=f'{member.bot}')
      embed.add_field(name="Roles", value=f'{roles}')
      embed.add_field(name="Avatar URL", value=f'[Click Here]({member.avatar_url})')
      embed.set_thumbnail(url=member.avatar_url)
      await ctx.send(embed=embed)
    @commands.command(aliases=['scorn'], description='Change Each And Every Character Of The Text To Upper/Lower(Randomly)', help="mock <text>")
    async def mock(self, ctx, *, arg=None):
      mock=""
      if arg==None:
        await ctx.send("...and what text do I mock?")
        return
      else:
        for i in arg:
          if random.randrange(1,3)==1:
            mock=mock+str(i).upper()
          else:
            mock=mock+str(i).lower()
        await ctx.send(f'`Here goes your mocked text:` **{mock}**')
    @commands.command(aliases=['bubbleburst'], description='Add A Spoiler To Each And Every Letter On The Supplied Message', help="spoiler <text>")
    async def spoiler(self, ctx, *, msg=None):
      if msg==None:
        await ctx.send("And what do I change into a spoiler?")
      else:
        await ctx.message.delete()
        spoiler=""
        for i in msg:
          if i==" ":
            spoiler=f'{spoiler} '
          else:
             spoiler=f'{spoiler}||{i}||'
        await ctx.send(f'{spoiler}')
def setup(bot):
    bot.add_cog(FunAndUtil(bot))
